name: Python application

on:
  push:
    branches:
      - 'main'
      - 'bbond/'
  pull_request:
    branches:
      - 'main'
      - 'bbond/'

permissions:
  contents: write

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python 3.13
        uses: actions/setup-python@v3
        with:
          python-version: "3.13.0-rc.1"
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

  autopep8:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python 3.13
        uses: actions/setup-python@v3
        with:
          python-version: "3.13.0-rc.1"
      - name: Install autopep8
        run: pip install autopep8
      - name: Run autopep8
        id: autopep8
        run: |
          autopep8 -i -v -r *.py > post_traces/autopep8_report.txt 2>&1 || true
      - name: Run autopep8 and generate report
        id: autopep8_report
        run: |
          autopep8 -i -v -r *.py > post_traces/autopep8_report.txt 2>&1 || true
      - name: Check autopep8 issues, generate report, and create badge
        id: check_autopep8
        run: |
          if grep -q "issue(s) to fix" post_traces/autopep8_report.txt; then
            issues_remaining=$(grep -oP '\d+(?= issue\(s\) to fix)' post_traces/autopep8_report.txt | sort -nr | head -n 1)
            if [ "$issues_remaining" -eq 0 ]; then
              echo "All files are autopep8 formatted" > post_traces/autopep8_report.txt
              badge_color="brightgreen"
              badge_message="autopep8-formatted"
            else
              echo "Not all files are autopep8 formatted" > post_traces/autopep8_report.txt
              badge_color="red"
              badge_message="autopep8-not_formatted"
            fi
          else
            echo "autopep8 did not produce expected report" > post_traces/autopep8_report.txt
            badge_color="lightgrey"
            badge_message="autopep8-status_unknown"
          fi
          badge_url="https://img.shields.io/badge/${badge_message}-${badge_color}"
          echo "$badge_url" > post_traces/autopep8_badge.txt

  lint:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python 3.13
        uses: actions/setup-python@v3
        with:
          python-version: "3.13.0-rc.1"
      - name: Install pylint
        run: pip install pylint
      - name: Lint code with Pylint
        run: |
          pylint "*.py" --ignore=previous-homeworks --ignore=rand.py > post_traces/pylint_report.txt || true
      - name: Generate Pylint badge
        run: |
          pylint_score=$(grep -oP 'Your code has been rated at \K[0-9.]+\/10' post_traces/pylint_report.txt)
          pylint_badge="https://img.shields.io/badge/pylint-${pylint_score}-brightgreen"
          echo "$pylint_badge" > post_traces/pylint_badge.txt
          echo $pylint_badge
      - name: Upload Pylint badge
        uses: actions/upload-artifact@v3
        with:
          name: pylint-badge
          path: post_traces/pylint_badge.txt

  radon:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python 3.13
        uses: actions/setup-python@v3
        with:
          python-version: "3.13.0-rc.1"
      - name: Install radon
        run: pip install radon
      - name: Measure complexity with Radon
        run: |
          radon mi -s *.py > post_traces/radon_report.txt || true
      - name: Generate Radon badge
        run: |
          radon_score=$(grep -oP '\([0-9]+\.[0-9]+\)' post_traces/radon_report.txt | sed 's/[()]//g' | sort -nr | head -n 1)
          if (( $(echo "$radon_score >= 90" | bc -l) )); then
            radon_color="brightgreen"
          elif (( $(echo "$radon_score >= 80" | bc -l) )); then
            radon_color="yellowgreen"
          elif (( $(echo "$radon_score >= 70" | bc -l) )); then
            radon_color="yellow"
          elif (( $(echo "$radon_score >= 60" | bc -l) )); then
            radon_color="orange"
          else
            radon_color="red"
          fi
          radon_badge="https://img.shields.io/badge/maintainability-${radon_score}-${radon_color}"
          echo "$radon_badge" > post_traces/radon_badge.txt

  test:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python 3.13
        uses: actions/setup-python@v3
        with:
          python-version: "3.13.0-rc.1"
      - name: Install testing dependencies
        run: pip install pytest pytest-cov
      - name: Test with pytest
        run: |
          pytest --doctest-modules --junitxml=post_traces/test-results.xml --cov=com --cov-report=xml --cov-report=html

  update_readme:
    runs-on: ubuntu-latest
    needs: [lint, radon, autopep8]
    steps:
      - uses: actions/checkout@v4
      - name: Download Pylint badge
        uses: actions/download-artifact@v3
        with:
          name: pylint-badge
      - name: Update README.md with badges
        run: |
          pylint_badge=$(cat pylint_badge.txt)
          echo $pylint_badge
          radon_badge=$(cat post_traces/radon_badge.txt)
          autopep8_badge=$(cat post_traces/autopep8_badge.txt)
          sed -i "s|!\[Pylint Score\](https://img.shields.io/badge/pylint-.*)|![Pylint Score](${pylint_badge})|g" README.md
          sed -i "s|!\[Radon Maintainability\](https://img.shields.io/badge/maintainability-.*)|![Radon Maintainability](${radon_badge})|g" README.md
          sed -i "s|!\[autopep8 Status\](https://img.shields.io/badge/autopep8-.*)|![autopep8 Status](${autopep8_badge})|g" README.md

      - name: Commit updated README.md 
        run: |
          git config user.name "github-actions"
          git config user.email "github-actions@github.com"
          git add README.md post_traces/autopep8_badge.txt post_traces/autopep8_report.txt post_traces/pylint_badge.txt post_traces/pylint_report.txt post_traces/radon_report.txt post_traces/radon_badge.txt
          git commit -m "Update badges" || echo "No changes to commit"
          git push 
