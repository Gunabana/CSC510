name: Python application

on:
  push:
    branches:
      - 'main'
      - 'bbond/'
      
  pull_request:
    branches:
      - 'main'
      - 'bbond/'

permissions:
  contents: write

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python 3.13
      uses: actions/setup-python@v3
      with:
        python-version: "3.13.0-rc.1"

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

    - name: Install autopep8, pylint, and radon
      run: pip install autopep8 pylint radon

    - name: Format code with AutoPep8
      run: autopep8 --in-place --aggressive --aggressive *.py

    - name: Measure complexity with Radon
      run: |
        mkdir -p post_traces
        radon mi -s *.py > post_traces/radon_report.txt

    - name: Lint code with Pylint
      run: |
        pylint "*.py" --ignore=previous-homeworks --ignore=rand.py > post_traces/pylint_report.txt || true

    - name: Test with pytest
      run: |
        pip install pytest pytest-cov
        pip install --upgrade setuptools
        pytest --doctest-modules --junitxml=post_traces/test-results.xml --cov=com --cov-report=xml --cov-report=html

    - name: Generate Pylint badge
      run: |
        pylint_score=$(grep -oP 'Your code has been rated at \K[0-9.]+\/10' post_traces/pylint_report.txt)
        pylint_badge="https://img.shields.io/badge/pylint-${pylint_score}-brightgreen"
        echo "$pylint_badge"
        echo "$pylint_badge" > post_traces/pylint_badge.txt

    - name: Generate Radon badge
      run: |
        # Extract the highest Radon score from the report
        radon_score=$(grep -oP '\([0-9]+\.[0-9]+\)' post_traces/radon_report.txt | sed 's/[()]//g' | sort -nr | head -n 1)
        
        # Map the numerical score to badge color (example mapping)
        if (( $(echo "$radon_score >= 90" | bc -l) )); then
          radon_color="brightgreen"
        elif (( $(echo "$radon_score >= 80" | bc -l) )); then
          radon_color="yellowgreen"
        elif (( $(echo "$radon_score >= 70" | bc -l) )); then
          radon_color="yellow"
        elif (( $(echo "$radon_score >= 60" | bc -l) )); then
          radon_color="orange"
        else
          radon_color="red"
        fi
        
        radon_badge="https://img.shields.io/badge/maintainability-${radon_score}-${radon_color}"
        echo "$radon_badge"
        echo "$radon_badge" > post_traces/radon_badge.txt
    
    - name: Generate AutoPep8 badge
      run: |
        # Create diff report and count changes made by AutoPep8
        autopep8 --diff *.py > post_traces/autopep8_diff.txt
        autopep8_changes=$(grep -c '^\+' post_traces/autopep8_diff.txt || echo 0)
        
        # Map number of changes to badge color
        if (( autopep8_changes == 0 )); then
          autopep8_color="brightgreen"
        elif (( autopep8_changes <= 10 )); then
          autopep8_color="yellowgreen"
        elif (( autopep8_changes <= 50 )); then
          autopep8_color="yellow"
        elif (( autopep8_changes <= 100 )); then
          autopep8_color="orange"
        else
          autopep8_color="red"
        fi
        
        autopep8_badge="https://img.shields.io/badge/autopep8-${autopep8_changes}_changes-${autopep8_color}"
        echo "$autopep8_badge"
        echo "$autopep8_badge" > post_traces/autopep8_badge.txt

    - name: Update README.md with badges
      run: |
        pylint_badge=$(cat post_traces/pylint_badge.txt)
        radon_badge=$(cat post_traces/radon_badge.txt)
        autopep8_badge=$(cat post_traces/autopep8_badge.txt)

        sed -i "s|!\[Pylint Score\](https://img.shields.io/badge/pylint-.*)|![Pylint Score](${pylint_badge})|g" README.md
        sed -i "s|!\[Radon Maintainability\](https://img.shields.io/badge/maintainability-.*)|![Radon Maintainability](${radon_badge})|g" README.md
        sed -i "s|!\[AutoPep8\](https://img.shields.io/badge/autopep8-.*)|![AutoPep8](${autopep8_badge})|g" README.md || \
        echo "![AutoPep8](${autopep8_badge})" >> README.md


    - name: Commit updated README.md 
      run: |
        git config user.name "github-actions"
        git config user.email "github-actions@github.com"
        git add README.md post_traces/pylint_badge.txt post_traces/radon_badge.txt post_traces/autopep8_badge.txt post_traces/pylint_report.txt post_traces/radon_report.txt
        git commit -am "Update Pylint, Radon, and AutoPep8 badges" || echo "No changes to commit" 
        git push
